g_ln <- PlotInfluence2(GetDf(x, GetLightXi(x), sig_n))
g_lw <- PlotInfluence2(GetDf(x, GetLightXi(x), sig_w))
grid.arrange(
g_hn, g_hw, g_ln, g_lw, ncol=2
)
PlotInfluence2 <- function(df) {
ggplot(df %>% filter(name == "xi")) +
geom_bar(aes(x=i, y=value), stat="identity") +
geom_bar(aes(x=i, y=value), stat="identity", data=filter(df, i >= 18), fill="red") +
ylim(ymin, ymax)
}
g_hn <- PlotInfluence2(GetDf(x, GetHeavyXi(x), sig_n))
g_hw <- PlotInfluence2(GetDf(x, GetHeavyXi(x), sig_w))
g_ln <- PlotInfluence2(GetDf(x, GetLightXi(x), sig_n))
g_lw <- PlotInfluence2(GetDf(x, GetLightXi(x), sig_w))
grid.arrange(
g_hn, g_hw, g_ln, g_lw, ncol=2
)
PlotInfluence2 <- function(df) {
ggplot(df %>% filter(name == "xi")) +
geom_bar(aes(x=i, y=value), stat="identity") +
geom_bar(aes(x=i, y=value), stat="identity",
data=filter(df, i >= 18), fill="red") +
ylim(ymin, ymax)
}
g_hn <- PlotInfluence2(GetDf(x, GetHeavyXi(x), sig_n))
g_hw <- PlotInfluence2(GetDf(x, GetHeavyXi(x), sig_w))
g_ln <- PlotInfluence2(GetDf(x, GetLightXi(x), sig_n))
g_lw <- PlotInfluence2(GetDf(x, GetLightXi(x), sig_w))
grid.arrange(
g_hn, g_hw, g_ln, g_lw, ncol=2
)
PlotInfluence2 <- function(df) {
ggplot(df %>% filter(name == "xi")) +
geom_bar(aes(x=i, y=value), stat="identity") +
# geom_bar(aes(x=i, y=value), stat="identity",
#          data=filter(df, i >= 18), fill="red") +
ylim(ymin, ymax)
}
g_hn <- PlotInfluence2(GetDf(x, GetHeavyXi(x), sig_n))
g_hw <- PlotInfluence2(GetDf(x, GetHeavyXi(x), sig_w))
g_ln <- PlotInfluence2(GetDf(x, GetLightXi(x), sig_n))
g_lw <- PlotInfluence2(GetDf(x, GetLightXi(x), sig_w))
grid.arrange(
g_hn, g_hw, g_ln, g_lw, ncol=2
)
PlotInfluence2 <- function(df) {
ggplot(df %>% filter(name == "xi")) +
geom_bar(aes(x=i, y=value), stat="identity") +
geom_bar(aes(x=i, y=value), stat="identity",
data=filter(df, i >= 18), fill="red") +
ylim(ymin, ymax)
}
PlotInfluence2(GetDf(x, GetLightXi(x), sig_n))
PlotInfluence2 <- function(df) {
df_plot <- df %>% filter(name == "xi")
ggplot(df_plot) +
geom_bar(aes(x=i, y=value), stat="identity") +
geom_bar(aes(x=i, y=value), stat="identity",
data=filter(df_plot, i >= 18), fill="red") +
ylim(ymin, ymax)
}
PlotInfluence2(GetDf(x, GetLightXi(x), sig_n))
PlotInfluence2 <- function(df) {
df_plot <- df %>% filter(name == "xi")
ggplot(df_plot) +
geom_bar(aes(x=i, y=value), stat="identity") +
geom_bar(aes(x=i, y=value), stat="identity",
data=filter(df_plot, i >= 17), fill="red") +
ylim(ymin, ymax)
}
#PlotInfluence2(GetDf(x, GetLightXi(x), sig_n))
g_hn <- PlotInfluence2(GetDf(x, GetHeavyXi(x), sig_n))
g_hw <- PlotInfluence2(GetDf(x, GetHeavyXi(x), sig_w))
g_ln <- PlotInfluence2(GetDf(x, GetLightXi(x), sig_n))
g_lw <- PlotInfluence2(GetDf(x, GetLightXi(x), sig_w))
grid.arrange(
g_hn, g_hw, g_ln, g_lw, ncol=2
)
grid.arrange(g_hw, g_lw, ncol=2)
i_min <- 17
df <- GetDf(x, GetHeavyXi(x), sig_w)
g_hw_effect <- sum(filter(df, name == "xi", i >= i_min)$value)
i_min <- 17
df_hw <- GetDf(x, GetHeavyXi(x), sig_w)
g_hw_effect <- sum(filter(df_hw, name == "xi", i >= i_min)$value)
g_hw <- PlotInfluence2(df_hw)
g_hw_effect
df_lw<- GetDf(x, GetLightXi(x), sig_w)
g_lw_effect <- sum(filter(df_lw, name == "xi", i >= i_min)$value)
g_lw <- PlotInfluence2(df_lw)
g_lw_effect
g_hw_effect
grid.arrange(g_hw, g_lw, ncol=2)
PlotInfluence2 <- function(df, i_min) {
df_plot <- df %>% filter(name == "xi")
ggplot(df_plot) +
geom_bar(aes(x=i, y=value), stat="identity") +
geom_bar(aes(x=i, y=value), stat="identity",
data=filter(df_plot, i >= i_min), fill="red") +
ylim(ymin, ymax) +
xlab("Influence rank") + ylab("Influence")
}
i_min <- 17
df_hw <- GetDf(x, GetHeavyXi(x), sig_w)
g_hw_effect <- sum(filter(df_hw, name == "xi", i >= i_min)$value)
g_hw <- PlotInfluence2(df_hw)
df_lw<- GetDf(x, GetLightXi(x), sig_w)
g_lw_effect <- sum(filter(df_lw, name == "xi", i >= i_min)$value)
g_lw <- PlotInfluence2(df_lw)
grid.arrange(g_hw, g_lw, ncol=2)
PlotInfluence2 <- function(df, i_min) {
df_plot <- df %>% filter(name == "xi")
ggplot(df_plot) +
geom_bar(aes(x=i, y=value), stat="identity") +
geom_bar(aes(x=i, y=value), stat="identity",
data=filter(df_plot, i >= i_min), fill="red") +
ylim(ymin, ymax) +
xlab("Influence rank") + ylab("Influence")
}
i_min <- 17
df_hw <- GetDf(x, GetHeavyXi(x), sig_w)
g_hw_effect <- sum(filter(df_hw, name == "xi", i >= i_min)$value)
g_hw <- PlotInfluence2(df_hw, i_min)
df_lw<- GetDf(x, GetLightXi(x), sig_w)
g_lw_effect <- sum(filter(df_lw, name == "xi", i >= i_min)$value)
g_lw <- PlotInfluence2(df_lw, i_min)
grid.arrange(g_hw, g_lw, ncol=2)
df_hw <- GetDf(x, GetHeavyXi(x), sig_w)
g_hw_effect <- sum(filter(df_hw, name == "xi", i >= i_min)$value)
g_hw <- PlotInfluence2(df_hw, i_min) + ggtitle(sprintf("Heavy tails: %f", g_hw_effect))
df_lw<- GetDf(x, GetLightXi(x), sig_w)
g_lw_effect <- sum(filter(df_lw, name == "xi", i >= i_min)$value)
g_lw <- PlotInfluence2(df_lw, i_min) + ggtitle(sprintf("Light tails: %f", g_hl_effect))
grid.arrange(g_hw, g_lw, ncol=2)
df_lw<- GetDf(x, GetLightXi(x), sig_w)
g_lw_effect <- sum(filter(df_lw, name == "xi", i >= i_min)$value)
g_lw <- PlotInfluence2(df_lw, i_min) + ggtitle(sprintf("Light tails: %f", g_lw_effect))
grid.arrange(g_hw, g_lw, ncol=2)
library(rminfluence)
PlotInfluence
library(rminfluence)
PlotInfluence
library(tidyverse)
library(gridExtra)
library(rminfluence)
GetDf <- function(x, raw_xi, sigma) {
gamma <- raw_xi / sqrt(mean(raw_xi^2))
xi <- sigma * gamma
df <- data.frame(xi=xi, gamma=gamma) %>%
pivot_longer(cols=c(xi, gamma)) %>%
group_by(name) %>%
mutate(i=order(value))
return(df)
}
n <- 20
# x <- rnorm(floor(n / 2))
# x <- c(-x, x) %>% sort()
x <- 1:20
x <- x - mean(x)
x <- x / sd(x)
ymin <- -5
ymax <- 5
# l, h = light, heavy
# w, n = wide, narrow
GetHeavyXi <- function(x) {
#return(sign(x) * x ^ 2)
return(sign(x) / (abs(x) ^ (1.5)))
}
GetLightXi <- function(x) {
return(pnorm(x) - 0.5)
}
# Set some sigma to remain within the limits of the graph.
light_xi <- GetLightXi(x)
heavy_xi <- GetHeavyXi(x)
sig_w <- 4.5 / max(heavy_xi / sqrt(mean(heavy_xi^2)))
sig_n <- 0.5 / max(light_xi / sqrt(mean(light_xi^2)))
PlotInfluence1 <- function(df) {
ggplot(df) +
geom_bar(aes(x=i, y=value, fill=name),
stat="identity", position="dodge", color="black") +
scale_fill_grey() +
ylim(ymin, ymax)
}
PlotInfluence1(GetDf(x, GetHeavyXi(x), sig_w))
df <- GetDf(x, GetHeavyXi(x), sig_n)
g_hn <- PlotInfluence1(df)
df <- GetDf(x, GetHeavyXi(x), sig_w)
g_hw <- PlotInfluence1(df)
df <- GetDf(x, GetLightXi(x), sig_n)
g_ln <- PlotInfluence1(df)
df <- GetDf(x, GetLightXi(x), sig_w)
g_lw <- PlotInfluence1(df)
grid.arrange(
g_hn, g_hw, g_ln, g_lw, ncol=2
)
##########################
PlotInfluence2 <- function(df, i_min) {
df_plot <- df %>% filter(name == "xi")
ggplot(df_plot) +
geom_bar(aes(x=i, y=value), stat="identity") +
geom_bar(aes(x=i, y=value), stat="identity",
data=filter(df_plot, i >= i_min), fill="red") +
ylim(ymin, ymax) +
xlab("Influence rank") + ylab("Influence")
}
i_min <- 17
df_hw <- GetDf(x, GetHeavyXi(x), sig_w)
g_hw_effect <- sum(filter(df_hw, name == "xi", i >= i_min)$value)
g_hw <- PlotInfluence2(df_hw, i_min) + ggtitle(sprintf("Heavy tails: %f", g_hw_effect))
df_lw<- GetDf(x, GetLightXi(x), sig_w)
g_lw_effect <- sum(filter(df_lw, name == "xi", i >= i_min)$value)
g_lw <- PlotInfluence2(df_lw, i_min) + ggtitle(sprintf("Light tails: %f", g_lw_effect))
grid.arrange(g_hw, g_lw, ncol=2)
###############################
###############################
###############################
# Exact MIP and MIS
PlotInfluence(influence_dfs$sign, "prop_removed", 0.01, target_change)
PlotInfluence
df <- data.frame(x=rnorm(100))
df <- data.frame(x=rnorm(100))
reg_fit <- lm(data = df, formula = x ~ 1, x=TRUE, y=TRUE)
reg_infl <- ComputeModelInfluence(reg_fit)
grad_df <- GetTargetRegressorGrads(reg_infl, "x1")
influence_dfs <- SortAndAccumulate(grad_df)
library(rminfluence)
df <- data.frame(x=rnorm(100))
reg_fit <- lm(data = df, formula = x ~ 1, x=TRUE, y=TRUE)
# Get influence.
reg_infl <- ComputeModelInfluence(reg_fit)
grad_df <- GetTargetRegressorGrads(reg_infl, "x1")
influence_dfs <- SortAndAccumulate(grad_df)
ComputeModelInfluence
base_dir <- "/home/rgiordan/Documents/git_repos/AdversarialInfluenceWorkbench"
py_main <- InitializePython(file.path(base_dir, "venv/bin/python"))
df <- data.frame(x=rnorm(100))
reg_fit <- lm(data = df, formula = x ~ 1, x=TRUE, y=TRUE)
# Get influence.
reg_infl <- ComputeModelInfluence(reg_fit)
grad_df <- GetTargetRegressorGrads(reg_infl, "x1")
influence_dfs <- SortAndAccumulate(grad_df)
library(tidyverse)
library(gridExtra)
library(rminfluence)
GetDf <- function(x, raw_xi, sigma) {
gamma <- raw_xi / sqrt(mean(raw_xi^2))
xi <- sigma * gamma
df <- data.frame(xi=xi, gamma=gamma) %>%
pivot_longer(cols=c(xi, gamma)) %>%
group_by(name) %>%
mutate(i=order(value))
return(df)
}
n <- 20
# x <- rnorm(floor(n / 2))
# x <- c(-x, x) %>% sort()
x <- 1:20
x <- x - mean(x)
x <- x / sd(x)
ymin <- -5
ymax <- 5
# l, h = light, heavy
# w, n = wide, narrow
GetHeavyXi <- function(x) {
#return(sign(x) * x ^ 2)
return(sign(x) / (abs(x) ^ (1.5)))
}
GetLightXi <- function(x) {
return(pnorm(x) - 0.5)
}
# Set some sigma to remain within the limits of the graph.
light_xi <- GetLightXi(x)
heavy_xi <- GetHeavyXi(x)
sig_w <- 4.5 / max(heavy_xi / sqrt(mean(heavy_xi^2)))
sig_n <- 0.5 / max(light_xi / sqrt(mean(light_xi^2)))
PlotInfluence1 <- function(df) {
ggplot(df) +
geom_bar(aes(x=i, y=value, fill=name),
stat="identity", position="dodge", color="black") +
scale_fill_grey() +
ylim(ymin, ymax)
}
PlotInfluence1(GetDf(x, GetHeavyXi(x), sig_w))
df <- GetDf(x, GetHeavyXi(x), sig_n)
g_hn <- PlotInfluence1(df)
df <- GetDf(x, GetHeavyXi(x), sig_w)
g_hw <- PlotInfluence1(df)
df <- GetDf(x, GetLightXi(x), sig_n)
g_ln <- PlotInfluence1(df)
df <- GetDf(x, GetLightXi(x), sig_w)
g_lw <- PlotInfluence1(df)
grid.arrange(
g_hn, g_hw, g_ln, g_lw, ncol=2
)
##########################
PlotInfluence2 <- function(df, i_min) {
df_plot <- df %>% filter(name == "xi")
ggplot(df_plot) +
geom_bar(aes(x=i, y=value), stat="identity") +
geom_bar(aes(x=i, y=value), stat="identity",
data=filter(df_plot, i >= i_min), fill="red") +
ylim(ymin, ymax) +
xlab("Influence rank") + ylab("Influence")
}
i_min <- 17
df_hw <- GetDf(x, GetHeavyXi(x), sig_w)
g_hw_effect <- sum(filter(df_hw, name == "xi", i >= i_min)$value)
g_hw <- PlotInfluence2(df_hw, i_min) + ggtitle(sprintf("Heavy tails: %f", g_hw_effect))
df_lw<- GetDf(x, GetLightXi(x), sig_w)
g_lw_effect <- sum(filter(df_lw, name == "xi", i >= i_min)$value)
g_lw <- PlotInfluence2(df_lw, i_min) + ggtitle(sprintf("Light tails: %f", g_lw_effect))
grid.arrange(g_hw, g_lw, ncol=2)
###############################
###############################
###############################
# Exact MIP and MIS
base_dir <- "/home/rgiordan/Documents/git_repos/AdversarialInfluenceWorkbench"
py_main <- InitializePython(file.path(base_dir, "venv/bin/python"))
df <- data.frame(x=rnorm(100))
reg_fit <- lm(data = df, formula = x ~ 1, x=TRUE, y=TRUE)
# Get influence.
reg_infl <- ComputeModelInfluence(reg_fit)
grad_df <- GetTargetRegressorGrads(reg_infl, "x1")
influence_dfs <- SortAndAccumulate(grad_df)
grad_df <- GetTargetRegressorGrads(reg_infl, "(Intercept)")
influence_dfs <- SortAndAccumulate(grad_df)
target_change <- GetRegressionTargetChange(influence_dfs, "prop_removed")
PlotInfluence(influence_dfs$sign, "num_removed", 0.01, target_change)
target_change
PlotInfluence(influence_dfs$sign, "num_removed", 0.01, target_change)
influence_dfs <- SortAndAccumulate(grad_df)
influence_dfs
target_change <- GetRegressionTargetChange(influence_dfs, "prop_removed")
target_change <- GetRegressionTargetChange(influence_dfs, "num_removed")
PlotInfluence(influence_dfs$sign, "num_removed", 0.01, target_change)
PlotInfluence(influence_dfs$sign, "num_removed", 100, target_change)
PlotInfluence
influence_dfs$sign$neg <- data.frame()
PlotInfluence(influence_dfs$sign, "num_removed", 100, target_change)
base_dir <- "/home/rgiordan/Documents/git_repos/AdversarialInfluenceWorkbench"
py_main <- InitializePython(file.path(base_dir, "venv/bin/python"))
df <- data.frame(x=rnorm(1000))
reg_fit <- lm(data = df, formula = x ~ 1, x=TRUE, y=TRUE)
# Get influence.
reg_infl <- ComputeModelInfluence(reg_fit)
grad_df <- GetTargetRegressorGrads(reg_infl, "(Intercept)")
influence_dfs <- SortAndAccumulate(grad_df)
target_change <- GetRegressionTargetChange(influence_dfs, "num_removed")
influence_dfs$sign$neg <- data.frame()
PlotInfluence(influence_dfs$sign, "num_removed", 100, target_change)
set.seed(42)
df <- data.frame(x=rnorm(1000))
reg_fit <- lm(data = df, formula = x ~ 1, x=TRUE, y=TRUE)
# Get influence.
reg_infl <- ComputeModelInfluence(reg_fit)
grad_df <- GetTargetRegressorGrads(reg_infl, "(Intercept)")
influence_dfs <- SortAndAccumulate(grad_df)
target_change <- GetRegressionTargetChange(influence_dfs, "num_removed")
influence_dfs$sign$neg <- data.frame()
PlotInfluence(influence_dfs$sign, "num_removed", 100, target_change)
ggsave("/tmp/simple_mean_example.png")
base_dir <- "/home/rgiordan/Documents/git_repos/AdversarialInfluenceWorkbench"
py_main <- InitializePython(file.path(base_dir, "venv/bin/python"))
set.seed(42)
df <- data.frame(x=rnorm(1000))
reg_fit <- lm(data = df, formula = x ~ 1, x=TRUE, y=TRUE)
# Get influence.
reg_infl <- ComputeModelInfluence(reg_fit)
grad_df <- GetTargetRegressorGrads(reg_infl, "(Intercept)")
influence_dfs <- SortAndAccumulate(grad_df)
target_change <- GetRegressionTargetChange(influence_dfs, "num_removed")
influence_dfs$sign$neg <- data.frame()
PlotInfluence(influence_dfs$sign, "num_removed", 100, target_change)
ggsave("/tmp/simple_mean_example.png")
mean(x)
mean(df$x)
PlotInfluence
PlotInfluence(influence_dfs$sign, "num_removed", 100, target_change, sig_num_ses=0)
target_change <-
GetRegressionTargetChange(influence_dfs, "num_removed") %>%
filter(change="sign")
target_change <-
GetRegressionTargetChange(influence_dfs, "num_removed") %>%
filter(change=="sign")
set.seed(42)
df <- data.frame(x=rnorm(1000))
reg_fit <- lm(data = df, formula = x ~ 1, x=TRUE, y=TRUE)
# Get influence.
reg_infl <- ComputeModelInfluence(reg_fit)
grad_df <- GetTargetRegressorGrads(reg_infl, "(Intercept)")
influence_dfs <- SortAndAccumulate(grad_df)
target_change <-
GetRegressionTargetChange(influence_dfs, "num_removed") %>%
filter(change=="sign")
influence_dfs_plot <- influence_dfs
influence_dfs_plot$sign$neg <- data.frame()
PlotInfluence(influence_dfs_plot$sign, "num_removed", 100, target_change, sig_num_ses=0)
mean(df$x)
ggsave("/tmp/simple_mean_example.png")
PlotInfluence(influence_dfs_plot$sign, "num_removed", 100, target_change, sig_num_ses=0)
PlotInfluence(influence_dfs_plot$sign, "num_removed", 100, target_change, sig_num_ses=0) +
ylab(Tex("$\\hat\\theta"))
PlotInfluence(influence_dfs_plot$sign, "num_removed", 100, target_change, sig_num_ses=0) +
ylab(TeX("$\\hat\\theta"))
PlotInfluence(influence_dfs_plot$sign, "num_removed", 100, target_change, sig_num_ses=0) +
ylab(TeX("$\\hat{\\theta}"))
ggsave("/tmp/simple_mean_example.png")
ggsave("/tmp/simple_mean_example.png", width=400, height=300)
PlotInfluence(influence_dfs_plot$sign, "num_removed", 100, target_change, sig_num_ses=0) +
ylab(TeX("$\\hat{\\theta}"))
ggsave("/tmp/simple_mean_example.png", width=400, height=300)
ggsave("/tmp/simple_mean_example.png", width=6, height=4)
mean(df$x)
target_change
base_dir
file.path(base_dir, "/writing/figure/simple_mean_example.png")
file.path(base_dir, "/writing/output/figure/simple_mean_example.png")
ggsave(file.path(base_dir, "/writing/output/figures/simple_mean_example.png"), width=6, height=3, units="in")
PlotInfluence(influence_dfs_plot$sign, "num_removed", 100, target_change, sig_num_ses=2)
#!/usr/bin/env Rscript
library(dplyr)
library(ggplot2)
library(reshape2)
library(jsonlite)
library(boot) # for inv.logit
analysis_name <- "criteo_subsampled"
git_repo <- system("git rev-parse --show-toplevel", intern=TRUE)
data_directory <- file.path(git_repo, "code/criteo_experiment/data/")
input_rdata_filename <- file.path(data_directory, "criteo/criteo_data_for_paper.Rdata")
json_filename <- file.path(
data_directory, paste(analysis_name, "_stan_dat.json", sep=""))
cat("Loading data from", input_rdata_filename, "\n")
# If you set the analysis name to this value, it will simulate a small dataset
# instead of loading the criteo data.  This allows for faster iteration and
# experimentation.
#analysis_name <- "simulated_data_small"
git_repo
git_repo
setwd("/home/rgiordan/Documents/git_repos/CovariancesRobustnessVBPaper/code/criteo_experiment")
#!/usr/bin/env Rscript
library(dplyr)
library(ggplot2)
library(reshape2)
library(jsonlite)
library(boot) # for inv.logit
analysis_name <- "criteo_subsampled"
git_repo <- system("git rev-parse --show-toplevel", intern=TRUE)
git_repo
data_directory <- file.path(git_repo, "code/criteo_experiment/data/")
input_rdata_filename <- file.path(data_directory, "criteo/criteo_data_for_paper.Rdata")
json_filename <- file.path(
data_directory, paste(analysis_name, "_stan_dat.json", sep=""))
cat("Loading data from", input_rdata_filename, "\n")
# If you set the analysis name to this value, it will simulate a small dataset
# instead of loading the criteo data.  This allows for faster iteration and
# experimentation.
#analysis_name <- "simulated_data_small"
true_params <- list()
if (analysis_name == "simulated_data_small") {
n_obs_per_group <- 10
k_reg <- 5
n_groups <- 100
n_obs <- n_groups * n_obs_per_group
set.seed(42)
true_params <- list()
true_params$n_obs <- n_obs
true_params$k_reg <- k_reg
true_params$n_groups <- n_groups
true_params$tau <- 1
true_params$mu <- -3.5
true_params$beta <- 1:k_reg
true_params$u <- list()
for (g in 1:n_groups) {
true_params$u[[g]] <- rnorm(1, true_params$mu, 1 / sqrt(true_params$tau))
}
# Select correlated regressors to induce posterior correlation in beta.
x_cov <- (matrix(0.5, k_reg, k_reg) + diag(k_reg)) / 2.5
x <- rmvnorm(n_obs, sigma=x_cov)
# y_g is expected to be zero-indexed.
y_g <- as.integer(rep(1:n_groups, each=n_obs_per_group) - 1)
true_offsets <- x %*% true_params$beta
for (n in 1:n_obs) {
# C++ is zero indexed but R is one indexed
true_offsets[n] <- true_offsets[n] + true_params$u[[y_g[n] + 1]]
}
true_probs <- inv.logit(true_offsets)
print(summary(true_probs))
y <- rbinom(n=n_obs, size=1, prob=true_probs)
iters <- 3000 # We actually need more than this -- use this for debugging.
} else if (analysis_name == "criteo_subsampled") {
true_params <- list()
load(input_rdata_filename)
iters <- 10000
} else {
stop("Unknown analysis name.")
}
# Save all the data in a format readable by Stan.
k_reg <- ncol(x)
stan_dat <- list(NG = max(y_g) + 1,
N = length(y),
K = ncol(x),
y_group = y_g,
y = y,
x = x,
# Priors
beta_prior_mean = rep(0, k_reg),
beta_prior_info = 0.1 * diag(k_reg),
mu_prior_mean = 0.0,
mu_prior_info = 0.01,
tau_prior_alpha = 3.0,
tau_prior_beta = 3.0)
