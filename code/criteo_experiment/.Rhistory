ylim(ymin, ymax)
}
g_hn <- PlotInfluence2(GetDf(x, GetHeavyXi(x), sig_n))
g_hw <- PlotInfluence2(GetDf(x, GetHeavyXi(x), sig_w))
g_ln <- PlotInfluence2(GetDf(x, GetLightXi(x), sig_n))
g_lw <- PlotInfluence2(GetDf(x, GetLightXi(x), sig_w))
grid.arrange(
g_hn, g_hw, g_ln, g_lw, ncol=2
)
PlotInfluence2 <- function(df) {
ggplot(df %>% filter(name == "xi")) +
geom_bar(aes(x=i, y=value), stat="identity") +
geom_bar(aes(x=i, y=value), stat="identity", data=filter(df, i >= 18), fill="red") +
ylim(ymin, ymax)
}
g_hn <- PlotInfluence2(GetDf(x, GetHeavyXi(x), sig_n))
g_hw <- PlotInfluence2(GetDf(x, GetHeavyXi(x), sig_w))
g_ln <- PlotInfluence2(GetDf(x, GetLightXi(x), sig_n))
g_lw <- PlotInfluence2(GetDf(x, GetLightXi(x), sig_w))
grid.arrange(
g_hn, g_hw, g_ln, g_lw, ncol=2
)
PlotInfluence2 <- function(df) {
ggplot(df %>% filter(name == "xi")) +
geom_bar(aes(x=i, y=value), stat="identity") +
geom_bar(aes(x=i, y=value), stat="identity",
data=filter(df, i >= 18), fill="red") +
ylim(ymin, ymax)
}
g_hn <- PlotInfluence2(GetDf(x, GetHeavyXi(x), sig_n))
g_hw <- PlotInfluence2(GetDf(x, GetHeavyXi(x), sig_w))
g_ln <- PlotInfluence2(GetDf(x, GetLightXi(x), sig_n))
g_lw <- PlotInfluence2(GetDf(x, GetLightXi(x), sig_w))
grid.arrange(
g_hn, g_hw, g_ln, g_lw, ncol=2
)
PlotInfluence2 <- function(df) {
ggplot(df %>% filter(name == "xi")) +
geom_bar(aes(x=i, y=value), stat="identity") +
# geom_bar(aes(x=i, y=value), stat="identity",
#          data=filter(df, i >= 18), fill="red") +
ylim(ymin, ymax)
}
g_hn <- PlotInfluence2(GetDf(x, GetHeavyXi(x), sig_n))
g_hw <- PlotInfluence2(GetDf(x, GetHeavyXi(x), sig_w))
g_ln <- PlotInfluence2(GetDf(x, GetLightXi(x), sig_n))
g_lw <- PlotInfluence2(GetDf(x, GetLightXi(x), sig_w))
grid.arrange(
g_hn, g_hw, g_ln, g_lw, ncol=2
)
PlotInfluence2 <- function(df) {
ggplot(df %>% filter(name == "xi")) +
geom_bar(aes(x=i, y=value), stat="identity") +
geom_bar(aes(x=i, y=value), stat="identity",
data=filter(df, i >= 18), fill="red") +
ylim(ymin, ymax)
}
PlotInfluence2(GetDf(x, GetLightXi(x), sig_n))
PlotInfluence2 <- function(df) {
df_plot <- df %>% filter(name == "xi")
ggplot(df_plot) +
geom_bar(aes(x=i, y=value), stat="identity") +
geom_bar(aes(x=i, y=value), stat="identity",
data=filter(df_plot, i >= 18), fill="red") +
ylim(ymin, ymax)
}
PlotInfluence2(GetDf(x, GetLightXi(x), sig_n))
PlotInfluence2 <- function(df) {
df_plot <- df %>% filter(name == "xi")
ggplot(df_plot) +
geom_bar(aes(x=i, y=value), stat="identity") +
geom_bar(aes(x=i, y=value), stat="identity",
data=filter(df_plot, i >= 17), fill="red") +
ylim(ymin, ymax)
}
#PlotInfluence2(GetDf(x, GetLightXi(x), sig_n))
g_hn <- PlotInfluence2(GetDf(x, GetHeavyXi(x), sig_n))
g_hw <- PlotInfluence2(GetDf(x, GetHeavyXi(x), sig_w))
g_ln <- PlotInfluence2(GetDf(x, GetLightXi(x), sig_n))
g_lw <- PlotInfluence2(GetDf(x, GetLightXi(x), sig_w))
grid.arrange(
g_hn, g_hw, g_ln, g_lw, ncol=2
)
grid.arrange(g_hw, g_lw, ncol=2)
i_min <- 17
df <- GetDf(x, GetHeavyXi(x), sig_w)
g_hw_effect <- sum(filter(df, name == "xi", i >= i_min)$value)
i_min <- 17
df_hw <- GetDf(x, GetHeavyXi(x), sig_w)
g_hw_effect <- sum(filter(df_hw, name == "xi", i >= i_min)$value)
g_hw <- PlotInfluence2(df_hw)
g_hw_effect
df_lw<- GetDf(x, GetLightXi(x), sig_w)
g_lw_effect <- sum(filter(df_lw, name == "xi", i >= i_min)$value)
g_lw <- PlotInfluence2(df_lw)
g_lw_effect
g_hw_effect
grid.arrange(g_hw, g_lw, ncol=2)
PlotInfluence2 <- function(df, i_min) {
df_plot <- df %>% filter(name == "xi")
ggplot(df_plot) +
geom_bar(aes(x=i, y=value), stat="identity") +
geom_bar(aes(x=i, y=value), stat="identity",
data=filter(df_plot, i >= i_min), fill="red") +
ylim(ymin, ymax) +
xlab("Influence rank") + ylab("Influence")
}
i_min <- 17
df_hw <- GetDf(x, GetHeavyXi(x), sig_w)
g_hw_effect <- sum(filter(df_hw, name == "xi", i >= i_min)$value)
g_hw <- PlotInfluence2(df_hw)
df_lw<- GetDf(x, GetLightXi(x), sig_w)
g_lw_effect <- sum(filter(df_lw, name == "xi", i >= i_min)$value)
g_lw <- PlotInfluence2(df_lw)
grid.arrange(g_hw, g_lw, ncol=2)
PlotInfluence2 <- function(df, i_min) {
df_plot <- df %>% filter(name == "xi")
ggplot(df_plot) +
geom_bar(aes(x=i, y=value), stat="identity") +
geom_bar(aes(x=i, y=value), stat="identity",
data=filter(df_plot, i >= i_min), fill="red") +
ylim(ymin, ymax) +
xlab("Influence rank") + ylab("Influence")
}
i_min <- 17
df_hw <- GetDf(x, GetHeavyXi(x), sig_w)
g_hw_effect <- sum(filter(df_hw, name == "xi", i >= i_min)$value)
g_hw <- PlotInfluence2(df_hw, i_min)
df_lw<- GetDf(x, GetLightXi(x), sig_w)
g_lw_effect <- sum(filter(df_lw, name == "xi", i >= i_min)$value)
g_lw <- PlotInfluence2(df_lw, i_min)
grid.arrange(g_hw, g_lw, ncol=2)
df_hw <- GetDf(x, GetHeavyXi(x), sig_w)
g_hw_effect <- sum(filter(df_hw, name == "xi", i >= i_min)$value)
g_hw <- PlotInfluence2(df_hw, i_min) + ggtitle(sprintf("Heavy tails: %f", g_hw_effect))
df_lw<- GetDf(x, GetLightXi(x), sig_w)
g_lw_effect <- sum(filter(df_lw, name == "xi", i >= i_min)$value)
g_lw <- PlotInfluence2(df_lw, i_min) + ggtitle(sprintf("Light tails: %f", g_hl_effect))
grid.arrange(g_hw, g_lw, ncol=2)
df_lw<- GetDf(x, GetLightXi(x), sig_w)
g_lw_effect <- sum(filter(df_lw, name == "xi", i >= i_min)$value)
g_lw <- PlotInfluence2(df_lw, i_min) + ggtitle(sprintf("Light tails: %f", g_lw_effect))
grid.arrange(g_hw, g_lw, ncol=2)
library(rminfluence)
PlotInfluence
library(rminfluence)
PlotInfluence
library(tidyverse)
library(gridExtra)
library(rminfluence)
GetDf <- function(x, raw_xi, sigma) {
gamma <- raw_xi / sqrt(mean(raw_xi^2))
xi <- sigma * gamma
df <- data.frame(xi=xi, gamma=gamma) %>%
pivot_longer(cols=c(xi, gamma)) %>%
group_by(name) %>%
mutate(i=order(value))
return(df)
}
n <- 20
# x <- rnorm(floor(n / 2))
# x <- c(-x, x) %>% sort()
x <- 1:20
x <- x - mean(x)
x <- x / sd(x)
ymin <- -5
ymax <- 5
# l, h = light, heavy
# w, n = wide, narrow
GetHeavyXi <- function(x) {
#return(sign(x) * x ^ 2)
return(sign(x) / (abs(x) ^ (1.5)))
}
GetLightXi <- function(x) {
return(pnorm(x) - 0.5)
}
# Set some sigma to remain within the limits of the graph.
light_xi <- GetLightXi(x)
heavy_xi <- GetHeavyXi(x)
sig_w <- 4.5 / max(heavy_xi / sqrt(mean(heavy_xi^2)))
sig_n <- 0.5 / max(light_xi / sqrt(mean(light_xi^2)))
PlotInfluence1 <- function(df) {
ggplot(df) +
geom_bar(aes(x=i, y=value, fill=name),
stat="identity", position="dodge", color="black") +
scale_fill_grey() +
ylim(ymin, ymax)
}
PlotInfluence1(GetDf(x, GetHeavyXi(x), sig_w))
df <- GetDf(x, GetHeavyXi(x), sig_n)
g_hn <- PlotInfluence1(df)
df <- GetDf(x, GetHeavyXi(x), sig_w)
g_hw <- PlotInfluence1(df)
df <- GetDf(x, GetLightXi(x), sig_n)
g_ln <- PlotInfluence1(df)
df <- GetDf(x, GetLightXi(x), sig_w)
g_lw <- PlotInfluence1(df)
grid.arrange(
g_hn, g_hw, g_ln, g_lw, ncol=2
)
##########################
PlotInfluence2 <- function(df, i_min) {
df_plot <- df %>% filter(name == "xi")
ggplot(df_plot) +
geom_bar(aes(x=i, y=value), stat="identity") +
geom_bar(aes(x=i, y=value), stat="identity",
data=filter(df_plot, i >= i_min), fill="red") +
ylim(ymin, ymax) +
xlab("Influence rank") + ylab("Influence")
}
i_min <- 17
df_hw <- GetDf(x, GetHeavyXi(x), sig_w)
g_hw_effect <- sum(filter(df_hw, name == "xi", i >= i_min)$value)
g_hw <- PlotInfluence2(df_hw, i_min) + ggtitle(sprintf("Heavy tails: %f", g_hw_effect))
df_lw<- GetDf(x, GetLightXi(x), sig_w)
g_lw_effect <- sum(filter(df_lw, name == "xi", i >= i_min)$value)
g_lw <- PlotInfluence2(df_lw, i_min) + ggtitle(sprintf("Light tails: %f", g_lw_effect))
grid.arrange(g_hw, g_lw, ncol=2)
###############################
###############################
###############################
# Exact MIP and MIS
PlotInfluence(influence_dfs$sign, "prop_removed", 0.01, target_change)
PlotInfluence
df <- data.frame(x=rnorm(100))
df <- data.frame(x=rnorm(100))
reg_fit <- lm(data = df, formula = x ~ 1, x=TRUE, y=TRUE)
reg_infl <- ComputeModelInfluence(reg_fit)
grad_df <- GetTargetRegressorGrads(reg_infl, "x1")
influence_dfs <- SortAndAccumulate(grad_df)
library(rminfluence)
df <- data.frame(x=rnorm(100))
reg_fit <- lm(data = df, formula = x ~ 1, x=TRUE, y=TRUE)
# Get influence.
reg_infl <- ComputeModelInfluence(reg_fit)
grad_df <- GetTargetRegressorGrads(reg_infl, "x1")
influence_dfs <- SortAndAccumulate(grad_df)
ComputeModelInfluence
base_dir <- "/home/rgiordan/Documents/git_repos/AdversarialInfluenceWorkbench"
py_main <- InitializePython(file.path(base_dir, "venv/bin/python"))
df <- data.frame(x=rnorm(100))
reg_fit <- lm(data = df, formula = x ~ 1, x=TRUE, y=TRUE)
# Get influence.
reg_infl <- ComputeModelInfluence(reg_fit)
grad_df <- GetTargetRegressorGrads(reg_infl, "x1")
influence_dfs <- SortAndAccumulate(grad_df)
library(tidyverse)
library(gridExtra)
library(rminfluence)
GetDf <- function(x, raw_xi, sigma) {
gamma <- raw_xi / sqrt(mean(raw_xi^2))
xi <- sigma * gamma
df <- data.frame(xi=xi, gamma=gamma) %>%
pivot_longer(cols=c(xi, gamma)) %>%
group_by(name) %>%
mutate(i=order(value))
return(df)
}
n <- 20
# x <- rnorm(floor(n / 2))
# x <- c(-x, x) %>% sort()
x <- 1:20
x <- x - mean(x)
x <- x / sd(x)
ymin <- -5
ymax <- 5
# l, h = light, heavy
# w, n = wide, narrow
GetHeavyXi <- function(x) {
#return(sign(x) * x ^ 2)
return(sign(x) / (abs(x) ^ (1.5)))
}
GetLightXi <- function(x) {
return(pnorm(x) - 0.5)
}
# Set some sigma to remain within the limits of the graph.
light_xi <- GetLightXi(x)
heavy_xi <- GetHeavyXi(x)
sig_w <- 4.5 / max(heavy_xi / sqrt(mean(heavy_xi^2)))
sig_n <- 0.5 / max(light_xi / sqrt(mean(light_xi^2)))
PlotInfluence1 <- function(df) {
ggplot(df) +
geom_bar(aes(x=i, y=value, fill=name),
stat="identity", position="dodge", color="black") +
scale_fill_grey() +
ylim(ymin, ymax)
}
PlotInfluence1(GetDf(x, GetHeavyXi(x), sig_w))
df <- GetDf(x, GetHeavyXi(x), sig_n)
g_hn <- PlotInfluence1(df)
df <- GetDf(x, GetHeavyXi(x), sig_w)
g_hw <- PlotInfluence1(df)
df <- GetDf(x, GetLightXi(x), sig_n)
g_ln <- PlotInfluence1(df)
df <- GetDf(x, GetLightXi(x), sig_w)
g_lw <- PlotInfluence1(df)
grid.arrange(
g_hn, g_hw, g_ln, g_lw, ncol=2
)
##########################
PlotInfluence2 <- function(df, i_min) {
df_plot <- df %>% filter(name == "xi")
ggplot(df_plot) +
geom_bar(aes(x=i, y=value), stat="identity") +
geom_bar(aes(x=i, y=value), stat="identity",
data=filter(df_plot, i >= i_min), fill="red") +
ylim(ymin, ymax) +
xlab("Influence rank") + ylab("Influence")
}
i_min <- 17
df_hw <- GetDf(x, GetHeavyXi(x), sig_w)
g_hw_effect <- sum(filter(df_hw, name == "xi", i >= i_min)$value)
g_hw <- PlotInfluence2(df_hw, i_min) + ggtitle(sprintf("Heavy tails: %f", g_hw_effect))
df_lw<- GetDf(x, GetLightXi(x), sig_w)
g_lw_effect <- sum(filter(df_lw, name == "xi", i >= i_min)$value)
g_lw <- PlotInfluence2(df_lw, i_min) + ggtitle(sprintf("Light tails: %f", g_lw_effect))
grid.arrange(g_hw, g_lw, ncol=2)
###############################
###############################
###############################
# Exact MIP and MIS
base_dir <- "/home/rgiordan/Documents/git_repos/AdversarialInfluenceWorkbench"
py_main <- InitializePython(file.path(base_dir, "venv/bin/python"))
df <- data.frame(x=rnorm(100))
reg_fit <- lm(data = df, formula = x ~ 1, x=TRUE, y=TRUE)
# Get influence.
reg_infl <- ComputeModelInfluence(reg_fit)
grad_df <- GetTargetRegressorGrads(reg_infl, "x1")
influence_dfs <- SortAndAccumulate(grad_df)
grad_df <- GetTargetRegressorGrads(reg_infl, "(Intercept)")
influence_dfs <- SortAndAccumulate(grad_df)
target_change <- GetRegressionTargetChange(influence_dfs, "prop_removed")
PlotInfluence(influence_dfs$sign, "num_removed", 0.01, target_change)
target_change
PlotInfluence(influence_dfs$sign, "num_removed", 0.01, target_change)
influence_dfs <- SortAndAccumulate(grad_df)
influence_dfs
target_change <- GetRegressionTargetChange(influence_dfs, "prop_removed")
target_change <- GetRegressionTargetChange(influence_dfs, "num_removed")
PlotInfluence(influence_dfs$sign, "num_removed", 0.01, target_change)
PlotInfluence(influence_dfs$sign, "num_removed", 100, target_change)
PlotInfluence
influence_dfs$sign$neg <- data.frame()
PlotInfluence(influence_dfs$sign, "num_removed", 100, target_change)
base_dir <- "/home/rgiordan/Documents/git_repos/AdversarialInfluenceWorkbench"
py_main <- InitializePython(file.path(base_dir, "venv/bin/python"))
df <- data.frame(x=rnorm(1000))
reg_fit <- lm(data = df, formula = x ~ 1, x=TRUE, y=TRUE)
# Get influence.
reg_infl <- ComputeModelInfluence(reg_fit)
grad_df <- GetTargetRegressorGrads(reg_infl, "(Intercept)")
influence_dfs <- SortAndAccumulate(grad_df)
target_change <- GetRegressionTargetChange(influence_dfs, "num_removed")
influence_dfs$sign$neg <- data.frame()
PlotInfluence(influence_dfs$sign, "num_removed", 100, target_change)
set.seed(42)
df <- data.frame(x=rnorm(1000))
reg_fit <- lm(data = df, formula = x ~ 1, x=TRUE, y=TRUE)
# Get influence.
reg_infl <- ComputeModelInfluence(reg_fit)
grad_df <- GetTargetRegressorGrads(reg_infl, "(Intercept)")
influence_dfs <- SortAndAccumulate(grad_df)
target_change <- GetRegressionTargetChange(influence_dfs, "num_removed")
influence_dfs$sign$neg <- data.frame()
PlotInfluence(influence_dfs$sign, "num_removed", 100, target_change)
ggsave("/tmp/simple_mean_example.png")
base_dir <- "/home/rgiordan/Documents/git_repos/AdversarialInfluenceWorkbench"
py_main <- InitializePython(file.path(base_dir, "venv/bin/python"))
set.seed(42)
df <- data.frame(x=rnorm(1000))
reg_fit <- lm(data = df, formula = x ~ 1, x=TRUE, y=TRUE)
# Get influence.
reg_infl <- ComputeModelInfluence(reg_fit)
grad_df <- GetTargetRegressorGrads(reg_infl, "(Intercept)")
influence_dfs <- SortAndAccumulate(grad_df)
target_change <- GetRegressionTargetChange(influence_dfs, "num_removed")
influence_dfs$sign$neg <- data.frame()
PlotInfluence(influence_dfs$sign, "num_removed", 100, target_change)
ggsave("/tmp/simple_mean_example.png")
mean(x)
mean(df$x)
PlotInfluence
PlotInfluence(influence_dfs$sign, "num_removed", 100, target_change, sig_num_ses=0)
target_change <-
GetRegressionTargetChange(influence_dfs, "num_removed") %>%
filter(change="sign")
target_change <-
GetRegressionTargetChange(influence_dfs, "num_removed") %>%
filter(change=="sign")
set.seed(42)
df <- data.frame(x=rnorm(1000))
reg_fit <- lm(data = df, formula = x ~ 1, x=TRUE, y=TRUE)
# Get influence.
reg_infl <- ComputeModelInfluence(reg_fit)
grad_df <- GetTargetRegressorGrads(reg_infl, "(Intercept)")
influence_dfs <- SortAndAccumulate(grad_df)
target_change <-
GetRegressionTargetChange(influence_dfs, "num_removed") %>%
filter(change=="sign")
influence_dfs_plot <- influence_dfs
influence_dfs_plot$sign$neg <- data.frame()
PlotInfluence(influence_dfs_plot$sign, "num_removed", 100, target_change, sig_num_ses=0)
mean(df$x)
ggsave("/tmp/simple_mean_example.png")
PlotInfluence(influence_dfs_plot$sign, "num_removed", 100, target_change, sig_num_ses=0)
PlotInfluence(influence_dfs_plot$sign, "num_removed", 100, target_change, sig_num_ses=0) +
ylab(Tex("$\\hat\\theta"))
PlotInfluence(influence_dfs_plot$sign, "num_removed", 100, target_change, sig_num_ses=0) +
ylab(TeX("$\\hat\\theta"))
PlotInfluence(influence_dfs_plot$sign, "num_removed", 100, target_change, sig_num_ses=0) +
ylab(TeX("$\\hat{\\theta}"))
ggsave("/tmp/simple_mean_example.png")
ggsave("/tmp/simple_mean_example.png", width=400, height=300)
PlotInfluence(influence_dfs_plot$sign, "num_removed", 100, target_change, sig_num_ses=0) +
ylab(TeX("$\\hat{\\theta}"))
ggsave("/tmp/simple_mean_example.png", width=400, height=300)
ggsave("/tmp/simple_mean_example.png", width=6, height=4)
mean(df$x)
target_change
base_dir
file.path(base_dir, "/writing/figure/simple_mean_example.png")
file.path(base_dir, "/writing/output/figure/simple_mean_example.png")
ggsave(file.path(base_dir, "/writing/output/figures/simple_mean_example.png"), width=6, height=3, units="in")
PlotInfluence(influence_dfs_plot$sign, "num_removed", 100, target_change, sig_num_ses=2)
#!/usr/bin/env Rscript
library(dplyr)
library(ggplot2)
library(reshape2)
library(jsonlite)
library(rstan)
library(rstansensitivity)
rstan_options(auto_write=TRUE)
##############
# Load the data.
git_repo <- system("git rev-parse --show-toplevel", intern=TRUE)
data_dir <- file.path(git_repo, "code/criteo_experiment/data")
analysis_name <- "criteo_subsampled"
#analysis_name <- "simulated_data_small"
# Input file:
json_filename <- file.path(
data_dir, paste(analysis_name, "_stan_dat.json", sep=""))
# Output file:
stan_draws_file <- file.path(
data_dir, paste(analysis_name, "_mcmc_draws.Rdata", sep=""))
json_dat <- fromJSON(readLines(json_filename))
stan_dat <- json_dat$stan_dat
stan_dir <- file.path(git_repo, "code/criteo_experiment/R/stan/")
stan_model_name <- "logit_glmm"
# Complie the Stan model.
print("Compiling Stan model.")
# To make the sensitivity scripts, run the following command in the stan directory:
# StanSensitivity/python/generate_models.py --base_model=logit_glmm.stan
model_file <- file.path(stan_dir, paste(stan_model_name, "_generated.stan", sep=""))
model <- stan_model(model_file)
stan_sensitivity_model <- GetStanSensitivityModel(file.path(stan_dir, "logit_glmm"), stan_dat)
setwd("/home/rgiordan/Documents/git_repos/CovariancesRobustnessVBPaper/code/criteo_experiment")
#!/usr/bin/env Rscript
library(dplyr)
library(ggplot2)
library(reshape2)
library(jsonlite)
library(rstan)
library(rstansensitivity)
rstan_options(auto_write=TRUE)
##############
# Load the data.
git_repo <- system("git rev-parse --show-toplevel", intern=TRUE)
data_dir <- file.path(git_repo, "code/criteo_experiment/data")
analysis_name <- "criteo_subsampled"
#analysis_name <- "simulated_data_small"
# Input file:
json_filename <- file.path(
data_dir, paste(analysis_name, "_stan_dat.json", sep=""))
# Output file:
stan_draws_file <- file.path(
data_dir, paste(analysis_name, "_mcmc_draws.Rdata", sep=""))
json_dat <- fromJSON(readLines(json_filename))
stan_dat <- json_dat$stan_dat
stan_dir <- file.path(git_repo, "code/criteo_experiment/R/stan/")
stan_model_name <- "logit_glmm"
# Complie the Stan model.
print("Compiling Stan model.")
# To make the sensitivity scripts, run the following command in the stan directory:
# StanSensitivity/python/generate_models.py --base_model=logit_glmm.stan
model_file <- file.path(stan_dir, paste(stan_model_name, "_generated.stan", sep=""))
model <- stan_model(model_file)
stan_sensitivity_model <- GetStanSensitivityModel(file.path(stan_dir, "logit_glmm"), stan_dat)
###################
# Run MCMC.
# Some knobs we can tweak.  Note that we need many iterations to accurately assess
# the prior sensitivity in the MCMC noise.
iters <- json_dat$iters
seed <- 42
chains <- 1
cores <- 1 # Note: the senstivity analysis currently only supports one core.
# MCMC draws.
mcmc_time <- Sys.time()
stan_dat$mu_prior_epsilon <- 0
stan_sim <- sampling(
model, data=stan_dat, seed=seed, iter=iters, chains=chains, cores=cores)
mcmc_time <- Sys.time() - mcmc_time
# Get the sensitivity results.
stopifnot(cores == 1) # rstansensitivity only supports one core for now.
draws_mat <- rstan::extract(stan_sim, permute=FALSE)[,1,]
mcmc_sens_time <- Sys.time()
sens_result <- GetStanSensitivityFromModelFit(stan_sim, stan_sensitivity_model)
mcmc_sens_time <- Sys.time() - mcmc_sens_time
# Save the results to an RData file for further post-processing.
save(stan_sim, mcmc_time, stan_dat,
sens_result, stan_sensitivity_model, mcmc_sens_time,
chains, cores,
file=stan_draws_file)
