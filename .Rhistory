mutate(mtcars, car=rownames(mtcars)) %>%
select(mpg, disp, hp, wt, am, gear)
mtcars_subset <-
mutate(mtcars, car=rownames(mtcars)) %>%
select(car, mpg, disp, hp, wt, am, gear)
mtcars_subset
rownames(mtcars)
library(ggplot2)
library(dplyr)
library(reshape2)
mtcars <-
mutate(mtcars, cyl=ordered(cyl), vs=factor(vs), gear=factor(gear), am=factor(am))
ungroup(mtcars) %>%
group_by(am) %>%
summarize(mean=mean(mpg), sd=sd(mpg))
ggplot(mtcars) + geom_point(aes(x=wt, y=mpg, color=factor(am)))
mtcars_melt <-
mutate(mtcars, car=rownames(mtcars)) %>%
melt(id.vars=c("car", "mpg"))
ggplot(mtcars_melt) +
geom_point(aes(x=value, y=mpg)) +
geom_line(aes(x=value, y=mpg)) +
facet_grid(~ variable, scales="free")
ggplot(filter(mtcars_melt, variable %in% c("vs", "gear", "am"))) +
geom_histogram(aes(x=mpg, fill=value, group=value), bins=6) +
facet_grid(value ~ variable, scales="free")
ggplot(mtcars_melt) +
geom_histogram(aes(x=mpg), color="black", bins=12)
qqnorm(mtcars_melt$mpg)
mtcars_subset <-
mutate(mtcars, car=rownames(as.character(mtcars))) %>%
select(car, mpg, disp, hp, wt, am, gear)
mtcars_melt <- melt(mtcars_subset, id.vars=c("car", "mpg"))
ggplot(mtcars_melt) +
geom_point(aes(x=value, y=mpg)) +
geom_line(aes(x=value, y=mpg)) +
facet_grid(~ variable, scales="free")
library(ggplot2)
library(dplyr)
library(reshape2)
# mtcars <-
#   mutate(mtcars, cyl=ordered(cyl), vs=factor(vs), gear=factor(gear), am=factor(am))
#
# ungroup(mtcars) %>%
#   group_by(am) %>%
#   summarize(mean=mean(mpg), sd=sd(mpg))
#
# ggplot(mtcars) + geom_point(aes(x=wt, y=mpg, color=factor(am)))
#
# mtcars_melt <-
#   mutate(mtcars, car=rownames(mtcars)) %>%
#   melt(id.vars=c("car", "mpg"))
#
# ggplot(mtcars_melt) +
#   geom_point(aes(x=value, y=mpg)) +
#   geom_line(aes(x=value, y=mpg)) +
#   facet_grid(~ variable, scales="free")
#
# ggplot(filter(mtcars_melt, variable %in% c("vs", "gear", "am"))) +
#   geom_histogram(aes(x=mpg, fill=value, group=value), bins=6) +
#   facet_grid(value ~ variable, scales="free")
#
# ggplot(mtcars_melt) +
#   geom_histogram(aes(x=mpg), color="black", bins=12)
#
# qqnorm(mtcars_melt$mpg)
mtcars_subset <-
mutate(mtcars, car=rownames(as.character(mtcars))) %>%
select(car, mpg, disp, hp, wt, am, gear)
mtcars_melt <- melt(mtcars_subset, id.vars=c("car", "mpg"))
ggplot(mtcars_melt) +
geom_point(aes(x=value, y=mpg)) +
geom_line(aes(x=value, y=mpg)) +
facet_grid(~ variable, scales="free")
mtcars_subset
mtcars_subset <-
mutate(mtcars, car=rownames(as.character(mtcars))) %>%
select(car, mpg, disp, hp, wt, am, gear)
mtcars
library(ggplot2)
library(dplyr)
library(reshape2)
# mtcars <-
#   mutate(mtcars, cyl=ordered(cyl), vs=factor(vs), gear=factor(gear), am=factor(am))
#
# ungroup(mtcars) %>%
#   group_by(am) %>%
#   summarize(mean=mean(mpg), sd=sd(mpg))
#
# ggplot(mtcars) + geom_point(aes(x=wt, y=mpg, color=factor(am)))
#
# mtcars_melt <-
#   mutate(mtcars, car=rownames(mtcars)) %>%
#   melt(id.vars=c("car", "mpg"))
#
# ggplot(mtcars_melt) +
#   geom_point(aes(x=value, y=mpg)) +
#   geom_line(aes(x=value, y=mpg)) +
#   facet_grid(~ variable, scales="free")
#
# ggplot(filter(mtcars_melt, variable %in% c("vs", "gear", "am"))) +
#   geom_histogram(aes(x=mpg, fill=value, group=value), bins=6) +
#   facet_grid(value ~ variable, scales="free")
#
# ggplot(mtcars_melt) +
#   geom_histogram(aes(x=mpg), color="black", bins=12)
#
# qqnorm(mtcars_melt$mpg)
mtcars_subset <-
mutate(mtcars, car=rownames(as.character(mtcars))) %>%
select(car, mpg, disp, hp, wt, am, gear)
mtcars
rownames(mtcars)
mtcars_subset <-
mutate(mtcars, car=rownames(mtcars)) %>%
select(car, mpg, disp, hp, wt, am, gear)
mtcars_subset
mtcars_melt <- melt(mtcars_subset, id.vars=c("car", "mpg"))
ggplot(mtcars_melt) +
geom_point(aes(x=value, y=mpg)) +
geom_line(aes(x=value, y=mpg)) +
facet_grid(~ variable, scales="free")
mtcars_melt <- melt(mtcars, id.vars=c("car", "mpg"))
ggplot(mtcars_melt) +
geom_point(aes(x=value, y=mpg)) +
geom_line(aes(x=value, y=mpg)) +
facet_grid(~ variable, scales="free")
mtcars_subset <-
mutate(mtcars, car=rownames(mtcars))# %>%
#  select(car, mpg, disp, hp, wt, am, gear)
mtcars_melt <- melt(mtcars, id.vars=c("car", "mpg"))
mtcars_subset <-
mutate(mtcars, car=rownames(mtcars))# %>%
#  select(car, mpg, disp, hp, wt, am, gear)
mtcars_melt <- melt(mtcars_subset, id.vars=c("car", "mpg"))
ggplot(mtcars_melt) +
geom_point(aes(x=value, y=mpg)) +
geom_line(aes(x=value, y=mpg)) +
facet_grid(~ variable, scales="free")
# mtcars <-
?drat
?mtcars
pairs(mtcars_subset)
pairs(mtcars)
keep_cols <- colnames(mtcars)
mtcars_subset <-
mutate(mtcars, car=rownames(mtcars))# %>%
select(car, keep_cols)
keep_cols <- colnames(mtcars)
mtcars_subset <-
mutate(mtcars, car=rownames(mtcars)) %>%
select(car, keep_cols)
mtcars_subset
keep_cols <- colnames(mtcars)
keep_cols <- c("wt", "hp", "drat", "qsec")
mtcars_subset <-
mutate(mtcars, car=rownames(mtcars)) %>%
select(car, mpg, keep_cols)
pairs(mtcars)
pairs(select(mtcars_subset, -car))
keep_cols <- colnames(mtcars)
keep_cols <- c("wt", "drat", "qsec")
mtcars_subset <-
mutate(mtcars, car=rownames(mtcars)) %>%
select(car, mpg, keep_cols)
pairs(select(mtcars_subset, -car))
keep_cols <- colnames(mtcars)
keep_cols <- c("wt", "drat", "qsec", "am")
mtcars_subset <-
mutate(mtcars, car=rownames(mtcars)) %>%
select(car, mpg, keep_cols)
pairs(select(mtcars_subset, -car))
qqnorm(mtcars_melt$mpg)
?mtcars
ncol(mtcars_subset)
namesmtcars_subset)
names(mtcars_subset)
mtcars_subset
keep_cols <- colnames(mtcars)
#keep_cols <- c("wt", "drat", "qsec", "am")
mtcars_subset <-
mutate(mtcars, car=rownames(mtcars)) %>%
select(car, mpg, keep_cols)
pairs(select(mtcars_subset, -car))
?mtcars
pairs(select(mtcars_subset, -car))
#keep_cols <- colnames(mtcars)
keep_cols <- c("wt", "drat", "qsec", "am", "gear")
mtcars_subset <-
mutate(mtcars, car=rownames(mtcars)) %>%
select(car, mpg, keep_cols)
pairs(select(mtcars_subset, -car))
mtcars_melt <- melt(mtcars_subset, id.vars=c("car", "mpg"))
ungroup(mtcars_subset) %>%
group_by(am) %>%
summarize(mean=mean(mpg), sd=sd(mpg))
ungroup(mtcars_subset) %>%
group_by(am) %>%
summarize(mean=mean(mpg), sd=sd(mpg), n=n(), se=sd / sqrt(n))
ungroup(mtcars_subset) %>%
group_by(am) %>%
summarize(mean=mean(mpg), sd=sd(mpg), n=n(), ci=2 * sd / sqrt(n))
library(ggplot2)
library(dplyr)
library(reshape2)
#keep_cols <- colnames(mtcars)
keep_cols <- c("wt", "drat", "qsec", "am", "gear")
mtcars_subset <-
mutate(mtcars, car=rownames(mtcars)) %>%
select(car, mpg, keep_cols)
pairs(select(mtcars_subset, -car))
mtcars_melt <- melt(mtcars_subset, id.vars=c("car", "mpg"))
ggplot(mtcars_melt) +
geom_point(aes(x=value, y=mpg)) +
geom_line(aes(x=value, y=mpg)) +
facet_grid(~ variable, scales="free")
qqnorm(mtcars_melt$mpg)
ungroup(mtcars_subset) %>%
group_by(am) %>%
summarize(mean=mean(mpg), sd=sd(mpg), n=n(), ci=2 * sd / sqrt(n))
# mtcars <-
#   mutate(mtcars, cyl=ordered(cyl), vs=factor(vs), gear=factor(gear), am=factor(am))
#
# ungroup(mtcars) %>%
#   group_by(am) %>%
#   summarize(mean=mean(mpg), sd=sd(mpg))
#
# ggplot(mtcars) + geom_point(aes(x=wt, y=mpg, color=factor(am)))
#
# mtcars_melt <-
#   mutate(mtcars, car=rownames(mtcars)) %>%
#   melt(id.vars=c("car", "mpg"))
#
# ggplot(mtcars_melt) +
#   geom_point(aes(x=value, y=mpg)) +
#   geom_line(aes(x=value, y=mpg)) +
#   facet_grid(~ variable, scales="free")
#
# ggplot(filter(mtcars_melt, variable %in% c("vs", "gear", "am"))) +
#   geom_histogram(aes(x=mpg, fill=value, group=value), bins=6) +
#   facet_grid(value ~ variable, scales="free")
#
# ggplot(mtcars_melt) +
#   geom_histogram(aes(x=mpg), color="black", bins=12)
#
# qqnorm(mtcars_melt$mpg)
mtcars_subset
xtable(mtcars_subset)
library(xtable)
xtable(mtcars_subset)
?xtable
?print.xtable
?xtBLE
?xtable
dicits <- c(   3,    3,     0,      0,    0)
digits <- c(   3,    3,     0,      0,    0)
xtable(mtcars_subset, digits=digits)
names(mtcars_subset)
names(mtcars_subset)
digits <- c(0,   3,    3,     0,      0,    0)
xtable(mtcars_subset, digits=digits)
digits
len(digits)
length(digits)
ncol(x)
names(mtcars_subset)
digits <- c(0, 3, 3, 3, 0, 0, 0)
xtable(mtcars_subset, digits=digits)
length(digits)
digits <- c(0, 0, 3, 3, 3, 0, 0, 0)
xtable(mtcars_subset, digits=digits)
names(mtcars_subset)
digits <- c(0, 0, 1, 3, 2, 0, 0, 0)
xtable(mtcars_subset, digits=digits)
source('~/Documents/git_repos/CovariancesRobustnessVBPaper/code/R/create_datasets.R', echo=TRUE)
setwd("Documents/git_repos/CovariancesRobustnessVBPaper/")
#!/usr/bin/env Rscript
library(dplyr)
library(ggplot2)
library(reshape2)
library(jsonlite)
library(boot) # for inv.logit
git_repo <- system("git rev-parse --show-toplevel", intern=TRUE)
data_directory <- file.path(git_repo, "code/data/")
input_rdata_filename <- file.path(data_directory, "criteo/criteo_data_for_paper.Rdata")
json_filename <- file.path(
data_directory, paste(analysis_name, "_stan_dat.json", sep=""))
cat("Loading data from", input_rdata_filename, "\n")
analysis_name <- "criteo_subsampled"
# If you set the analysis name to this value, it will simulate a small dataset
# instead of loading the criteo data.  This allows for faster iteration and
# experimentation.
#analysis_name <- "simulated_data_small"
#!/usr/bin/env Rscript
library(dplyr)
library(ggplot2)
library(reshape2)
library(jsonlite)
library(boot) # for inv.logit
git_repo <- system("git rev-parse --show-toplevel", intern=TRUE)
data_directory <- file.path(git_repo, "code/data/")
input_rdata_filename <- file.path(data_directory, "criteo/criteo_data_for_paper.Rdata")
json_filename <- file.path(
data_directory, paste(analysis_name, "_stan_dat.json", sep=""))
cat("Loading data from", input_rdata_filename, "\n")
analysis_name <- "criteo_subsampled"
# If you set the analysis name to this value, it will simulate a small dataset
# instead of loading the criteo data.  This allows for faster iteration and
# experimentation.
#analysis_name <- "simulated_data_small"
true_params <- list()
if (analysis_name == "simulated_data_small") {
n_obs_per_group <- 10
k_reg <- 5
n_groups <- 100
n_obs <- n_groups * n_obs_per_group
set.seed(42)
true_params <- list()
true_params$n_obs <- n_obs
true_params$k_reg <- k_reg
true_params$n_groups <- n_groups
true_params$tau <- 1
true_params$mu <- -3.5
true_params$beta <- 1:k_reg
true_params$u <- list()
for (g in 1:n_groups) {
true_params$u[[g]] <- rnorm(1, true_params$mu, 1 / sqrt(true_params$tau))
}
# Select correlated regressors to induce posterior correlation in beta.
x_cov <- (matrix(0.5, k_reg, k_reg) + diag(k_reg)) / 2.5
x <- rmvnorm(n_obs, sigma=x_cov)
# y_g is expected to be zero-indexed.
y_g <- as.integer(rep(1:n_groups, each=n_obs_per_group) - 1)
true_offsets <- x %*% true_params$beta
for (n in 1:n_obs) {
# C++ is zero indexed but R is one indexed
true_offsets[n] <- true_offsets[n] + true_params$u[[y_g[n] + 1]]
}
true_probs <- inv.logit(true_offsets)
print(summary(true_probs))
y <- rbinom(n=n_obs, size=1, prob=true_probs)
iters <- 3000 # We actually need more than this -- use this for debugging.
} else if (analysis_name == "criteo_subsampled") {
true_params <- list()
load(input_rdata_filename)
iters <- 10000
} else {
stop("Unknown analysis name.")
}
# Save all the data in a format readable by Stan.
k_reg <- ncol(x)
stan_dat <- list(NG = max(y_g) + 1,
N = length(y),
K = ncol(x),
y_group = y_g,
y = y,
x = x,
# Priors
beta_prior_mean = rep(0, k_reg),
beta_prior_info = 0.1 * diag(k_reg),
mu_prior_mean = 0.0,
mu_prior_info = 0.01,
tau_prior_alpha = 3.0,
tau_prior_beta = 3.0)
# Export the data in JSON so it can be read by both Stan and Python.
json_file <- file(json_filename, "w")
json_list <- toJSON(list(stan_dat=stan_dat, true_params=true_params, iters=iters))
write(json_list, file=json_file)
close(json_file)
#!/usr/bin/env Rscript
library(dplyr)
library(ggplot2)
library(reshape2)
library(jsonlite)
library(rstan)
library(rstansensitivity)
rstan_options(auto_write=FALSE)
##############
# Load the data.
git_repo <- system("git rev-parse --show-toplevel", intern=TRUE)
data_dir <- file.path(git_repo, "code/data")
analysis_name <- "criteo_subsampled"
#analysis_name <- "simulated_data_small"
# Input file:
json_filename <- file.path(
data_dir, paste(analysis_name, "_stan_dat.json", sep=""))
# Output file:
stan_draws_file <- file.path(
data_dir, paste(analysis_name, "_mcmc_draws.Rdata", sep=""))
json_dat <- fromJSON(readLines(json_filename))
stan_dat <- json_dat$stan_dat
stan_dir <- file.path(git_repo, "code/R/stan/")
stan_model_name <- "logit_glmm"
model_file_rdata <- file.path(stan_dir, paste(stan_model_name, "Rdata", sep="."))
if (file.exists(model_file_rdata)) {
print("Loading pre-compiled Stan model.")
load(model_file_rdata)
} else {
# Run this to force re-compilation of the model.
print("Compiling Stan model.")
# In the stan directory run
# StanSensitivity/python/generate_models.py --base_model=logit_glmm.stan
model_file <- file.path(stan_dir, paste(stan_model_name, "_generated.stan", sep=""))
model <- stan_model(model_file)
stan_sensitivity_model <- GetStanSensitivityModel(file.path(stan_dir, "logit_glmm"), stan_dat)
save(model, stan_sensitivity_model, file=model_file_rdata)
}
stan_draws_file
d <- read.csv("~/Downloads/pup_grades.csv", header=T)
d
library(ggplot2)
librar(dplyr)
library(reshape2)
d <- read.csv("~/Downloads/pup_grades.csv", header=T)
dmelt <- melt(d)
dmelt <- melt(d, id.vars=c("Problem", "Possible.Points"))
dmelt
dmelt <-
melt(d, id.vars=c("Problem", "Possible.Points")) %>%
rename(Student=Variable)
dmelt
dmelt <-
melt(d, id.vars=c("Problem", "Possible.Points")) %>%
rename(Student=variable)
head(dmelt)
dmelt <-
melt(d, id.vars=c("Problem", "Possible.Points")) %>%
rename(Student=variable, Score=value)
totals <-
group_by(dmelt, Student) %>%
summarize(score=sum(Possible.Points * score))
totals <-
group_by(dmelt, Student) %>%
summarize(score=sum(Possible.Points * Score))
totals
totals <-
group_by(dmelt, Student) %>%
summarize(score=sum(Possible.Points * Score)) %>%
filter(Student != "Perfect")
ggplot(totals) +
geom_histogram(aes(x=score))
ggplot(totals) +
geom_histogram(aes(x=score), bins=10)
ggplot(totals) +
geom_histogram(aes(x=score), bins=10) +
xlab("Score")
ggplot(filter(totals, Student != "Perfect")) +
geom_histogram(aes(x=score), bins=10) +
xlab("Score") +
xlim(0, filter(totals, Student == "Perfect")$score)
ggplot(filter(totals, Student != "Perfect")) +
geom_histogram(aes(x=score), bins=10) +
xlab("Score") +
xlim(c(0, filter(totals, Student == "Perfect")$score))
filter(totals, Student == "Perfect")$score
totals <-
group_by(dmelt, Student) %>%
summarize(score=sum(Possible.Points * Score))
ggplot(filter(totals, Student != "Perfect")) +
geom_histogram(aes(x=score), bins=10) +
xlab("Score") +
xlim(c(0, filter(totals, Student == "Perfect")$score))
ggplot(filter(totals, Student != "Perfect")) +
geom_histogram(aes(x=score), bins=20) +
xlab("Score") +
xlim(c(0, filter(totals, Student == "Perfect")$score))
ggplot(filter(totals, Student != "Perfect")) +
geom_histogram(aes(x=score), bins=20) +
xlab("Score") +
xlim(c(0, filter(totals, Student == "Perfect")$score)) +
ggtitle("PUP Exam 2 Score distribution")
problems <-
group_by(dmelt, Problem) %>%
summarize(score=sum(Score) / n())
problems
problems <-
group_by(dmelt, Problem) %>%
summarize(score=sum(Score) / n()) %>%
arrange(score)
problems
ggplot(problems) +
geom_point(aes(x=Problem, y=score))
problems$Problem <- ordered(problems$Problem, keys=problems$Problem)
problems$Problem <- ordered(problems$Problem, levels=problems$Problem)
ggplot(problems) +
geom_point(aes(x=Problem, y=score))
problems$Problem <- ordered(problems$Problem, levels=problems$Problem)
ggplot(problems) +
geom_point(aes(x=Problem, y=score)) +
ylim(c(0, 1))
problems$Problem <- ordered(problems$Problem, levels=problems$Problem)
ggplot(problems) +
geom_point(aes(x=Problem, y=score)) +
ylim(c(0, 1))
ggplot(problems) +
geom_point(aes(x=Problem, y=score)) +
ylim(c(0, 1)) + ylab("Average score (0 = incorrect, 1 = correct)")
problems$Problem <- ordered(problems$Problem, levels=problems$Problem)
ggplot(problems) +
geom_point(aes(x=Problem, y=score)) +
ylim(c(0, 1)) + ylab("Average score (0 = incorrect, 1 = correct)") +
ggtitle("PUP Exam 2 performance by problem")
ggplot(filter(totals, Student != "Perfect")) +
geom_histogram(aes(x=score), bins=20) +
xlab("Score") +
xlim(c(0, filter(totals, Student == "Perfect")$score)) +
ggtitle("PUP Exam 2 Score distribution")
filter(totals, Student != "Perfect")
ggplot(problems) +
geom_point(aes(x=Problem, y=score)) +
ylim(c(0, 1)) + ylab("Average score (0 = incorrect, 1 = correct)") +
ggtitle("PUP Exam 2 performance by problem")
